{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 9 12 15]\n",
      " [19 26 33]\n",
      " [24 33 42]\n",
      " [ 9 15 21]]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "def agh_superfast_matrix_multiply(a: np.matrix, b: np.matrix) -> np.matrix:\n",
    "    \"\"\"Perform totally ordinary multiplication of matrices.\n",
    "    \n",
    "    :param a: matrix with dimensions n by m\n",
    "    :param b: matrix with dimensions m by k\n",
    "    :return:  matrix with dimensions n by k\n",
    "    \"\"\"\n",
    "    n = len(a)\n",
    "    k = len(np.squeeze(np.asarray(b[0])))\n",
    "    res = np.arange(n*k).reshape(n, k)\n",
    "    for i in range(0, n):\n",
    "        for j in range(0, k):\n",
    "            tmp = zip(np.squeeze(np.asarray(a[i])), \n",
    "                      np.squeeze(np.asarray(b.transpose()[j])))\n",
    "            res[i][j] = sum([x*y for (x, y) in tmp])\n",
    "    return res\n",
    "\n",
    "m1 = np.matrix([[1, 2],\n",
    "                [3, 4],\n",
    "                [4, 5],\n",
    "                [5, 1]])\n",
    "\n",
    "m2 = np.matrix([[1, 2, 3],\n",
    "                [4, 5, 6]])\n",
    "\n",
    "res = agh_superfast_matrix_multiply(m1, m2)\n",
    "print(res)\n",
    "assert np.allclose(res, m1 * m2), \"Wrong multiplication result\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1. 2. 3.]\n"
     ]
    }
   ],
   "source": [
    "def no_pivot_gaussian_elimination(a: np.array, b: np.array) -> np.array:\n",
    "    a = np.asarray(a, dtype=float)\n",
    "    b = np.asarray(b, dtype=float)\n",
    "    n = len(a)\n",
    "    for i in range(0, n):\n",
    "        fact = a[i][i]\n",
    "        for j in range(i, n):\n",
    "            a[i][j] = a[i][j] / fact\n",
    "        b[i] = b[i] / fact\n",
    "        for j in range(0, n):\n",
    "            if j != i:\n",
    "                factor = a[j][i] / a[i][i]\n",
    "                for k in range(i, n):\n",
    "                    a[j][k] -= factor * a[i][k]\n",
    "                b[j] -= factor * b[i]\n",
    "    return b\n",
    "\n",
    "A = np.array([[2,2,3],\n",
    "              [4,3,1],\n",
    "              [5,4,2]])\n",
    "B = np.array([15,13,19]).transpose()\n",
    "res = no_pivot_gaussian_elimination(A, B)\n",
    "print(res)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def pivot_gaussian_elimination(a: np.array, b: np.array) -> np.array:\n",
    "    a = np.asarray(a, dtype=float)\n",
    "    b = np.asarray(b, dtype=float)\n",
    "    n = len(a)\n",
    "    row = np.arange(n)\n",
    "    for i in range(0, n):\n",
    "        #do pivoting\n",
    "        fact = a[row[i]][i]\n",
    "        for j in range(i, n):\n",
    "            a[row[i]][j] = a[row[i]][j] / fact\n",
    "        b[row[i]] = b[row[i]] / fact\n",
    "        for j in range(0, n):\n",
    "            if j != i:\n",
    "                factor = a[row[j]][i] / a[row[i]][i]\n",
    "                for k in range(i, n):\n",
    "                    a[row[j]][k] -= factor * a[row[i]][k]\n",
    "                b[row[j]] -= factor * b[row[i]]\n",
    "    return b\n",
    "\n",
    "A = np.array([[2,2,3],\n",
    "              [4,3,1],\n",
    "              [5,4,2]])\n",
    "B = np.array([15,13,19]).transpose()\n",
    "res = pivot_gaussian_elimination(A, B)\n",
    "print(res)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
